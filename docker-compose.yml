version: "3.9"

services:
    # ======================================================
    # POSTGRES DATABASE CONTAINER
    # ------------------------------------------------------
    # Stores all raw, cleaned, feature, forecast, and policy data.
    # Core data warehouse of the entire 5G optimization pipeline.
    # ======================================================

    postgres:
        image: postgres:16
        container_name: pg-cell
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 5s
            timeout: 3s
            retries: 10

    # ======================================================
    # PGADMIN UI (DATABASE MANAGEMENT)
    # ------------------------------------------------------
    # Web-based database interface for PostgreSQL.
    # ======================================================

    pgadmin:
        image: dpage/pgadmin4:8
        container_name: pgadmin-cell
        depends_on:
            - postgres
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - "5050:80"

    # ======================================================
    # FASTAPI BACKEND (API SERVICE)
    # ------------------------------------------------------
    # Provides REST endpoints for forecast, KPIs, and energy data.
    # Serves as middleware between the dashboard and PostgreSQL.
    # ======================================================

    api:
        build: .
        container_name: api-cell
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
        ports:
            - "8000:8000"
        volumes:
            - ./:/app
            - /var/run/docker.sock:/var/run/docker.sock

    # ======================================================
    # FEATURE JOB
    # ------------------------------------------------------
    # Computes engineered features from cleaned cell data.
    # Outputs results to `cell_features` table for ML training.
    # ======================================================

    feature_job:
        build: .
        container_name: feature-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/feature_job.py"]
        volumes:
            - ./:/app
            - ./data:/data
        deploy:
            resources:
                limits:
                    memory: 6g

    # ======================================================
    # TRAINING JOB
    # ------------------------------------------------------
    # Trains ML models (classification + regression) for forecasting.
    # Saves models into `/models` folder.
    # ======================================================

    train_job:
        build: .
        container_name: train-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/train_job.py"]
        volumes:
            - ./:/app
            - ./models:/app/models

    # ======================================================
    # INFERENCE JOB
    # ------------------------------------------------------
    # Runs trained models on new feature data to predict energy KPIs.
    # Writes predictions into `cell_forecast` and `cell_policy`.
    # ======================================================

    inference_job:
        build: .
        container_name: infer-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/inference_job.py", "--loop"]
        volumes:
            - ./:/app

    # ======================================================
    # FORECAST JOB
    # ------------------------------------------------------
    # Optional forecasting process for time-series modeling (Prophet etc.)
    # Produces longer horizon forecasts for each cell.
    # ======================================================

    forecast_job:
        build: .
        container_name: forecast-job
        command: python jobs/forecast_job.py
        volumes:
            - .:/app
        depends_on:
            - postgres
        env_file:
            - .env

    # ======================================================
    # HYPERPARAMETER TUNER
    # ------------------------------------------------------
    # Uses Optuna or similar optimization frameworks to find best model params.
    # Results saved into `/models/best_params.json`.
    # ======================================================

    tune_job:
        build: .
        container_name: tune-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/tune_job.py"]
        volumes:
            - ./:/app
            - ./models:/app/models

    # ======================================================
    # SIMULATOR JOB
    # ------------------------------------------------------
    # Generates synthetic radio and network KPIs for multiple virtual cells.
    # Feeds continuous streaming data into `cell_clean_data`.
    # ======================================================

    simulator_job:
        build: .
        container_name: simulator-job
        command: python jobs/simulator_job.py
        depends_on:
            - postgres
        environment:
            - SIM_INTERVAL_SEC=5
            - SIM_NUM_CELLS=5
            - SIM_DURATION_MIN=60
        volumes:
            - ./:/app

    # ======================================================
    # POLICY ENGINE
    # ------------------------------------------------------
    # Applies AI rules to decide energy actions (increase / decrease / hold).
    # Syncs `cell_policy` decisions with live `cell_status` table.
    # ======================================================

    policy_job:
        build: .
        container_name: policy-job
        command: ["python", "policy/policy_engine.py"]
        volumes:
            - .:/app
        depends_on:
            - postgres
        env_file:
            - .env
        environment:
            - POLICY_LOOP=false

    # ======================================================
    # MONITORING JOB
    # ------------------------------------------------------
    # Continuously checks for model drift or performance degradation.
    # Automatically triggers retraining if drift exceeds threshold.
    # ======================================================

    monitoring_job:
        build: .
        container_name: monitoring-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/monitoring_job.py", "--loop"]
        volumes:
            - ./:/app
        environment:
            - MONITORING_LOOP=false

    # ======================================================
    # KPI JOB
    # ------------------------------------------------------
    # Calculates daily KPIs (avg RSRP, SNR, throughput, latency, etc.)
    # Aggregates results into `cell_kpis_daily`.
    # ======================================================

    kpis_job:
        build: .
        container_name: kpis-job
        depends_on:
            - postgres
        env_file:
            - .env
        command: ["python", "jobs/kpis_job.py"]
        volumes:
            - ./:/app

    # ======================================================
    # ENERGY OPERATOR
    # ------------------------------------------------------
    # Executes simulated physical energy actions based on policy decisions.
    # Logs actions into `cell_operation_log`.
    # ======================================================

    energy_operator:
        build: .
        container_name: energy-operator
        command: ["python", "operations/energy_operator.py"]
        volumes:
            - .:/app
        depends_on:
            - postgres
        environment:
            - PYTHONUNBUFFERED=1

    # ======================================================
    #  DASHBOARD FRONTEND (REACT)
    # ------------------------------------------------------
    # Visual dashboard for metrics, forecasts, and energy actions.
    # ======================================================

    dashboard:
        image: node:20-alpine
        container_name: dashboard-cell
        working_dir: /app
        depends_on:
            - api
        ports:
            - "3000:3000"
        volumes:
            - ./dashboard:/app
        command: ["sh", "-c", "npm install && npm start"]
        stdin_open: true
        tty: true

volumes:
    pgdata:
